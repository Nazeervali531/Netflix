{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","hight","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPostion","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0UAMeA,E,OALEC,EAAMC,OAAO,CAC5BC,QAAS,iC,iCCoEIC,MA/Df,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EAChBC,mBAAS,IADO,mBACrCC,EADqC,KAC7BC,EAD6B,OAERF,mBAAS,IAFD,mBAErCG,EAFqC,KAEzBC,EAFyB,KA0C5C,OAtCAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIT,GADlC,cACQU,EADR,OAQEN,EAAUM,EAAQC,KAAKC,SARzB,kBASSF,GATT,4CADc,uBAAC,WAAD,wBAYdG,KACC,CAACb,IA0BF,yBAAKc,UAAU,OACb,4BAAKf,GACL,yBAAKe,UAAU,eACZX,EAAOY,KAAI,SAACC,GAAD,OACV,yBACEC,IAAKD,EAAME,GACXC,QAAS,kBAnBC,SAACH,GACfX,EACFC,EAAc,IAEdc,KAAkB,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOK,OAAQ,IACzBC,MAAK,SAACC,GACL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDrB,EAAckB,EAAUf,IAAI,SAE7BmB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAUXG,CAAYhB,IAC3BF,UAAS,sBAAiBb,GAAc,oBACxCgC,IAAG,UApDE,wCAoDF,OACDhC,EAAae,EAAMkB,YAAclB,EAAMmB,eAEzCC,IAAKpB,EAAMK,WAIhBhB,GAAc,kBAAC,IAAD,CAASgC,QAAShC,EAAYiC,KAnCpC,CACXC,MAAO,QACPC,MAAO,OACPC,WAAY,CACZC,SAAU,QClCRC,G,MAAQ,oCAWCC,EAVA,CACfC,cAAc,8BAAD,OAA+BF,EAA/B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAc,4BAAD,OAA6BJ,EAA7B,mBACbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,2BAAD,OAA4BN,EAA5B,mBACjBO,kBAAkB,2BAAD,OAA4BP,EAA5B,mBACjBQ,mBAAmB,2BAAD,OAA4BR,EAA5B,sBAClBS,mBAAmB,2BAAD,OAA4BT,EAA5B,oB,MC6CHU,MAjDf,WAAmB,IAgBCC,EAAIC,EAhBN,EACUrD,mBAAS,IADnB,mBACTc,EADS,KACFwC,EADE,KAmBhB,OAjBAjD,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAImC,EAASE,uBAD3C,cACQpC,EADR,OAEE8C,EACE9C,EAAQC,KAAKC,QACX6C,KAAKC,MAAMD,KAAKE,SAAWjD,EAAQC,KAAKC,QAAQgD,OAAS,KAJ/D,kBAOSlD,GAPT,4CADc,uBAAC,WAAD,wBAWdG,KACC,IACHiB,QAAQC,IAAIf,GAKV,4BACEF,UAAU,SACV+C,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,8DAAD,cACgC/C,QADhC,IACgCA,OADhC,EACgCA,EAAOmB,cADvC,oBAGf6B,kBAAmB,kBAGrB,yBAAKlD,UAAU,qBAGf,wBAAIA,UAAU,mBACN,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOK,QAAvB,OAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOiD,gBAEzC,yBAAKnD,UAAU,mBACb,4BAAQA,UAAU,kBAAlB,QACA,4BAAQA,UAAU,kBAAlB,YAGF,uBAAGA,UAAU,uBAzBCwC,EA0BF,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAOkD,SA1BFX,EA0BW,KAzBnB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAAOL,EAAED,EAAIa,OAAO,EAAEZ,EAAE,GAAG,MAAMD,IA2B7C,yBAAKxC,UAAU,yB,MCnBNsD,MA3Bf,WAAmB,IAAD,EAESlE,oBAAS,GAFlB,mBAERmE,EAFQ,KAEHC,EAFG,KAiBd,OAZA/D,qBAAU,WAMN,OALAgE,OAAOC,iBAAiB,UAAS,WAC1BD,OAAOE,QAAQ,IACdH,GAAW,GACTA,GAAW,MAEf,WACFC,OAAOG,oBAAoB,aAIjC,IAEE,yBAAK5D,UAAS,iBAAYuD,GAAQ,cAC9B,yBACIvD,UAAU,YACVmB,IAAI,iEAAiEG,IAAI,WCc1EuC,MA/Bf,WACE,OACE,yBAAK7D,UAAU,OAEb,kBAAC,EAAD,MAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEf,MAAM,oBACNC,SAAU4C,EAASE,sBACnB7C,YAAY,IAMd,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU4C,EAASC,gBAC7C,kBAAC,EAAD,CAAK9C,MAAM,YAAYC,SAAU4C,EAASG,gBAC1C,kBAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU4C,EAASI,oBAC9C,kBAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU4C,EAASK,oBAC9C,kBAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU4C,EAASM,oBAC9C,kBAAC,EAAD,CAAKnD,MAAM,iBAAiBC,SAAU4C,EAASO,qBAC/C,kBAAC,EAAD,CACEpD,MAAM,uBACNC,SAAU4C,EAASQ,uBCpBPwB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEd7D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6D,c","file":"static/js/main.e670d487.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n//insatnce.get('fightclub')\r\n//It will work like \"https://api.themoviedb.org/3/fightclub\",\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  //WITH USING PROPS WE CAN USE TILTLE AS PER eS7\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n\r\n      /*HOW async function works WITH THE HELP OF fetchData()\r\n                it WILL FETCHDATA\r\n                await(THE TIME PERIOD IT TAKES TO GET THE DATA(OR) RESPONSE axios.get(fetchUrl))\r\n            `https://api.themoviedb.org/3(baseURL comes because we import AXIos)/discover/tv?api_key=${API_KEY}&with_networks=213`*/\r\n\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  /*we have used\r\n     \"fetchUrl\" in use effect so it is mandtory to [fetchUrl]\r\n    because fetchUrl is a varable we have used in use effect so we have used in []*/\r\n\r\n  const opts = {\r\n    hight: \"390px\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n    autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"93fbc0f438c2261d7c30f1abb5418df3\";\r\nconst requests={\r\nfetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-Us`,\r\nfetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\nfetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\nfetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\nfetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\nfetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n  function truncate(str,n){\r\n      return str?.length>n?str.substr(0,n-1)+\"...\":str;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n        backgroundPostion: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\"></div>\r\n      {/*background Image*/}\r\n      {/*title*/}\r\n      <h1 className=\" banner__title\">\r\n        {movie?.title || movie?.name || movie?.original_name}\r\n      </h1>\r\n      <div className=\"banner__buttons\">\r\n        <button className=\"banner__button\">Play</button>\r\n        <button className=\"banner__button\">My List</button>\r\n      </div>\r\n      {/* div > 2 buttons*/}\r\n      <p className=\"banner__descrption\">\r\n         {truncate(movie?.overview,150)}</p>\r\n      {/* despription*/}\r\n      <div className=\"banner__fadeBottom\"/>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState,useEffect } from 'react';\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n\r\n    const[show,handleShow]=useState(false);\r\n\r\n    \r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n\r\n\r\n    },[]);\r\n    return (\r\n        <div className={`navbar ${show && \"nav_black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://brand.netflix.com/static/assets/icons/netflix_logo.svg\" alt=\"Logo\"/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from \"react\";\nimport Row from \"./Row\";\nimport \"./App.css\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*CREATING NAVBAR */}\n      <Navbar/>\n\n      {/*cREATE A BANNER FOR THE PROJECTS*/}\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      {/*WITH THE HELP OF requests from requests.js we have code of fetchNetflixOriginals.\n        WE ARE USING fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`\n        SAME AS FETCHtRENDING*/}\n\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row\n        title=\"Documentaries Movies\"\n        fetchUrl={requests.fetchDocumentaries}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}